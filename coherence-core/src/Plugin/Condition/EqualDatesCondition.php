<?php

namespace Drupal\coherence_core\Plugin\Condition;

use Drupal\Core\Condition\ConditionPluginBase;
use Drupal\Core\Entity\EntityFieldManagerInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\node\NodeInterface;
use Symfony\Component\DependencyInjection\ContainerInterface;

/**
 * Provides a condition to check two timestamp fields for equality.
 *
 * @Condition(
 *   id = "node_timestamps_equal",
 *   label = @Translation("Equal date fields")
 * )
 */
class EqualDatesCondition extends ConditionPluginBase implements ContainerFactoryPluginInterface
{

  /**
   * @var RouteMatchInterface
   */
  protected $routeMatch;

  /**
   * @var EntityFieldManagerInterface
   */
  protected $fieldManager;

  /**
   * {@inheritdoc}
   */
  public function __construct(array $configuration, $plugin_id, $plugin_definition, RouteMatchInterface $route_match, EntityFieldManagerInterface $field_manager)
  {
    parent::__construct($configuration, $plugin_id, $plugin_definition);

    $this->routeMatch = $route_match;
    $this->fieldManager = $field_manager;
  }

  /**
   * {@inheritdoc}
   */
  public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition)
  {
    return new static(
      $configuration,
      $plugin_id,
      $plugin_definition,
      $container->get('current_route_match'),
      $container->get('entity_field.manager')
    );
  }

  /**
   * {@inheritdoc}
   */
  public function buildConfigurationForm(array $form, FormStateInterface $form_state)
  {
    $field_map = $this->fieldManager->getFieldMapByFieldType('timestamp');
    if (isset($field_map['node']) && count($field_map['node'])) {
      $keys = array_keys($field_map['node']);

      $form['field_one'] = [
        '#title' => $this->t('1st Field'),
        '#type' => 'select',
        '#options' => ['' => '-- None --'] + array_combine($keys, $keys),
        '#default_value' => $this->configuration['field_one'] ?? '',
      ];

      $form['field_two'] = [
        '#title' => $this->t('2nd Field'),
        '#type' => 'select',
        '#options' => ['' => '-- None --'] + array_combine($keys, $keys),
        '#default_value' => $this->configuration['field_two'] ?? '',
      ];

    } else {
      $form['error'] = [
        '#markup' => '<p>There are no node-attached timestamp fields in the system. This condition will return TRUE for all evaluations.</p>',
      ];
    }

    return $form;
  }

  /**
   * {@inheritdoc}
   */
  public function submitConfigurationForm(array &$form, FormStateInterface $form_state)
  {
    $this->configuration['field_one'] = $form_state->getValue('field_one');
    $this->configuration['field_two'] = $form_state->getValue('field_two');

    parent::submitConfigurationForm($form, $form_state);
  }

  /**
   * {@inheritdoc}
   */
  public function evaluate()
  {
    // The condition should pass unless we're explicitly evaluating.
    if (!mb_strlen($this->configuration['field_one']) ||
      !mb_strlen($this->configuration['field_two'])) {
      return TRUE;
    }

    // This should work on node view and node preview.
    $route_name = $this->routeMatch->getRouteName();

    $node = NULL;
    if ($route_name == 'entity.node.canonical') {
      $node = $this->routeMatch->getParameter('node');
    }
    elseif ($route_name == 'entity.node.preview') {
      $node = $this->routeMatch->getParameter('node_preview');
    }

    if ($node instanceof NodeInterface &&
      $node->hasField($this->configuration['field_one']) &&
      $node->hasField($this->configuration['field_two'])) {

      $timestamp_one = $node->{$this->configuration['field_one']}->value;
      $timestamp_two = $node->{$this->configuration['field_two']}->value;

      $date_one = new \DateTime();
      $date_one->setTimestamp(strtotime($timestamp_one));

      $date_two = new \DateTime();
      $date_two->setTimestamp(strtotime($timestamp_two));

      $difference = $date_one->diff($date_two);

      return $difference->days == 0;
    }

    return FALSE;
  }

  /**
   * {@inheritdoc}
   */
  public function summary()
  {
    return $this->t('Condition to determine whether two selected date fields are equal within the current node.');
  }

  /**
   * {@inheritdoc}
   */
  public function getCacheContexts()
  {
    return parent::getCacheContexts(); // TODO: Change the autogenerated stub
  }

}