diff --git a/cohesion/modules/cohesion_sync/tests/src/Unit/Config/CohesionFullPackageStorageTest.php b/cohesion/modules/cohesion_sync/tests/src/Unit/Config/CohesionFullPackageStorageTest.php
index bac5944..128ea74 100644
--- a/cohesion/modules/cohesion_sync/tests/src/Unit/Config/CohesionFullPackageStorageTest.php
+++ b/cohesion/modules/cohesion_sync/tests/src/Unit/Config/CohesionFullPackageStorageTest.php
@@ -15,7 +15,8 @@ use Drupal\Tests\UnitTestCase;
  *
  * @package Drupal\Tests\cohesion_sync\Unit\Config
  */
-class CohesionFullPackageStorageTest extends UnitTestCase {
+class CohesionFullPackageStorageTest extends UnitTestCase
+{
 
   /**
    * The main drupal config storage.
@@ -57,7 +58,8 @@ class CohesionFullPackageStorageTest extends UnitTestCase {
   /**
    * @inheritDoc
    */
-  public function setUp() {
+  public function setUp()
+  {
     parent::setUp();
     $this->configStorage = $this->getMockBuilder(StorageInterface::class)
       ->disableOriginalConstructor()
@@ -134,14 +136,24 @@ class CohesionFullPackageStorageTest extends UnitTestCase {
    *
    * @covers Drupal\cohesion_sync\Config\CohesionFullPackageStorage::listAll
    */
-  public function testListAll() {
+  public function testListAll()
+  {
     $this->configStorage->expects($this->any())
       ->method('listAll')
       ->willReturn(array_keys($this->configs));
     $this->storage = new CohesionFullPackageStorage($this->configStorage, $this->configManager, $this->usagePluginManager);
 
-    $this->assertArrayEquals($this->storage->listAll(), ['cohesion_elements.cohesion_component.config_id'], 'ListAll show only contain the cohesion component');
-    $this->assertArrayEquals($this->storage->listAll('some_prefix'), ['cohesion_elements.cohesion_component.config_id'], 'ListAll show only contain the cohesion component regardless of the prefix');
+    $this->assertEqualsCanonicalizing(
+      ['cohesion_elements.cohesion_component.config_id'],
+      $this->storage->listAll(),
+      'ListAll should only contain the cohesion component'
+    );
+
+    $this->assertEqualsCanonicalizing(
+      ['cohesion_elements.cohesion_component.config_id'],
+      $this->storage->listAll('some_prefix'),
+      'ListAll should only contain the cohesion component regardless of the prefix'
+    );
   }
 
   /**
@@ -149,7 +161,8 @@ class CohesionFullPackageStorageTest extends UnitTestCase {
    *
    * @covers Drupal\cohesion_sync\Config\CohesionFullPackageStorage::read
    */
-  public function testRead() {
+  public function testRead()
+  {
     $this->configStorage->expects($this->any())
       ->method('listAll')
       ->willReturn(array_keys($this->configs));
@@ -165,7 +178,8 @@ class CohesionFullPackageStorageTest extends UnitTestCase {
    *
    * @covers Drupal\cohesion_sync\Config\CohesionFullPackageStorage::exists
    */
-  public function testExists() {
+  public function testExists()
+  {
     $this->configStorage->expects($this->any())
       ->method('listAll')
       ->willReturn(array_keys($this->configs));
@@ -181,7 +195,8 @@ class CohesionFullPackageStorageTest extends UnitTestCase {
    *
    * @covers Drupal\cohesion_sync\Config\CohesionFullPackageStorage::buildDependencies
    */
-  public function testBuildDependencies() {
+  public function testBuildDependencies()
+  {
     $this->configs['some_module.config.with_dependencies'] =  [
       'entity_type' => 'cohesion_component',
       'exists' => TRUE,
@@ -230,7 +245,8 @@ class CohesionFullPackageStorageTest extends UnitTestCase {
    *
    * @covers Drupal\cohesion_sync\Config\CohesionFullPackageStorage::configStatus
    */
-  public function testConfigStatus() {
+  public function testConfigStatus()
+  {
     $this->configs['some_module.config.without_status'] = [
       'entity_type' => 'cohesion_component',
       'exists' => TRUE,
@@ -267,7 +283,8 @@ class CohesionFullPackageStorageTest extends UnitTestCase {
    * @covers Drupal\cohesion_sync\Config\CohesionFullPackageStorage::getStorageFileList
    * @covers Drupal\cohesion_sync\Config\CohesionFullPackageStorage::buildStorageFileList
    */
-  public function testGetStorageFileList() {
+  public function testGetStorageFileList()
+  {
     $this->configs['config_with.file.dependency'] = [
       'entity_type' => 'cohesion_component',
       'exists' => TRUE,
@@ -324,9 +341,11 @@ class CohesionFullPackageStorageTest extends UnitTestCase {
       'dependency_5' => 'file',
       'dependency_4' => 'file',
     ];
-    $this->assertArrayEquals($excepted, $this->storage->getStorageFileList(), 'getStorageFileList should contain file dependency');
-
-
+    $this->assertEqualsCanonicalizing(
+      $excepted,
+      $this->storage->getStorageFileList(),
+      'getStorageFileList should contain file dependency'
+    );
   }
 
   /**
@@ -340,7 +359,8 @@ class CohesionFullPackageStorageTest extends UnitTestCase {
    *
    * @covers Drupal\cohesion_sync\Config\CohesionFullPackageStorage::getIncludedEntityTypes
    */
-  public function testGetIncludedEntityTypes($config, $results) {
+  public function testGetIncludedEntityTypes($config, $results)
+  {
 
     if ($config == NULL) {
       $this->configs = [];
@@ -350,14 +370,13 @@ class CohesionFullPackageStorageTest extends UnitTestCase {
       $this->storage = new CohesionFullPackageStorage($this->configStorage, $this->configManager, $this->usagePluginManager);
       $this->expectException(\Exception::class);
       $this->storage->getIncludedEntityTypes();
-    }
-    else {
+    } else {
       $this->configs = $config;
       $this->configStorage->expects($this->any())
         ->method('listAll')
         ->willReturn(array_keys($this->configs));
       $this->storage = new CohesionFullPackageStorage($this->configStorage, $this->configManager, $this->usagePluginManager);
-      $this->assertArrayEquals($results, $this->storage->getIncludedEntityTypes());
+      $this->assertEqualsCanonicalizing($results, $this->storage->getIncludedEntityTypes());
     }
   }
 
@@ -365,7 +384,8 @@ class CohesionFullPackageStorageTest extends UnitTestCase {
    * Data provider for ::testGetIncludedEntityTypes.
    * @return array
    */
-  public function dataGetIncludedEntityTypes() {
+  public function dataGetIncludedEntityTypes()
+  {
 
     $items = [];
 
diff --git a/cohesion/src/Entity/CohesionConfigEntityBase.php b/cohesion/src/Entity/CohesionConfigEntityBase.php
index f915c35..e2885a5 100644
--- a/cohesion/src/Entity/CohesionConfigEntityBase.php
+++ b/cohesion/src/Entity/CohesionConfigEntityBase.php
@@ -14,7 +14,8 @@ use Drupal\Core\Entity\EntityStorageInterface;
  *
  * @ingroup entity_api
  */
-abstract class CohesionConfigEntityBase extends ConfigEntityBase implements CohesionSettingsInterface, EntityUpdateInterface {
+abstract class CohesionConfigEntityBase extends ConfigEntityBase implements CohesionSettingsInterface, EntityUpdateInterface
+{
 
   use EntityJsonValuesTrait;
 
@@ -86,25 +87,27 @@ abstract class CohesionConfigEntityBase extends ConfigEntityBase implements Cohe
   /**
    * {@inheritdoc}
    */
-  public function getJsonValues() {
+  public function getJsonValues()
+  {
     return $this->json_values;
   }
 
   /**
    * {@inheritdoc}
    */
-  public function getJsonMapper() {
+  public function getJsonMapper()
+  {
     return $this->json_mapper;
   }
 
   /**
    * {@inheritdoc}
    */
-  public function getDecodedJsonMapper() {
+  public function getDecodedJsonMapper()
+  {
     try {
       return json_decode($this->getJsonMapper());
-    }
-    catch (\Exception $e) {
+    } catch (\Exception $e) {
       return [];
     }
   }
@@ -112,7 +115,8 @@ abstract class CohesionConfigEntityBase extends ConfigEntityBase implements Cohe
   /**
    * {@inheritdoc}
    */
-  public function setJsonValue($json_values) {
+  public function setJsonValue($json_values)
+  {
     $this->set('json_values', $json_values);
     return $this;
   }
@@ -120,7 +124,8 @@ abstract class CohesionConfigEntityBase extends ConfigEntityBase implements Cohe
   /**
    * {@inheritdoc}
    */
-  public function setJsonMapper($json_mapper) {
+  public function setJsonMapper($json_mapper)
+  {
     $this->set('json_mapper', trim($json_mapper));
     return $this;
   }
@@ -128,21 +133,24 @@ abstract class CohesionConfigEntityBase extends ConfigEntityBase implements Cohe
   /**
    * {@inheritdoc}
    */
-  public function getConfigType() {
+  public function getConfigType()
+  {
     return $this->getEntityTypeId();
   }
 
   /**
    * {@inheritdoc}
    */
-  public function getConfigItemId() {
+  public function getConfigItemId()
+  {
     return crc32($this->getEntityTypeId() . '_' . $this->id());
   }
 
   /**
    * @return bool
    */
-  public function getStatus() {
+  public function getStatus()
+  {
     return $this->status;
   }
 
@@ -151,7 +159,8 @@ abstract class CohesionConfigEntityBase extends ConfigEntityBase implements Cohe
    *
    * @return bool
    */
-  public function isModified() {
+  public function isModified()
+  {
     return $this->modified;
   }
 
@@ -162,7 +171,8 @@ abstract class CohesionConfigEntityBase extends ConfigEntityBase implements Cohe
    *
    * @return $this
    */
-  public function setModified($modified = TRUE) {
+  public function setModified($modified = TRUE)
+  {
     $this->set('modified', (bool) $modified);
     return $this;
   }
@@ -172,7 +182,8 @@ abstract class CohesionConfigEntityBase extends ConfigEntityBase implements Cohe
    *
    * @return bool
    */
-  public function isSelectable() {
+  public function isSelectable()
+  {
     return $this->selectable;
   }
 
@@ -183,7 +194,8 @@ abstract class CohesionConfigEntityBase extends ConfigEntityBase implements Cohe
    *
    * @return $this
    */
-  public function setSelectable($selectable = TRUE) {
+  public function setSelectable($selectable = TRUE)
+  {
     $this->set('selectable', (bool) $selectable);
     return $this;
   }
@@ -191,14 +203,16 @@ abstract class CohesionConfigEntityBase extends ConfigEntityBase implements Cohe
   /**
    * {@inheritdoc}
    */
-  public function isLocked() {
+  public function isLocked()
+  {
     return $this->locked;
   }
 
   /**
    * {@inheritdoc}
    */
-  public function setLocked($locked) {
+  public function setLocked($locked)
+  {
     $this->set('locked', $locked);
     return $this;
   }
@@ -208,14 +222,16 @@ abstract class CohesionConfigEntityBase extends ConfigEntityBase implements Cohe
    *
    * @return string
    */
-  public static function getAssetGroupId() {
+  public static function getAssetGroupId()
+  {
     return get_called_class()::ASSET_GROUP_ID;
   }
 
   /**
    * {@inheritdoc}
    */
-  public function preSave(EntityStorageInterface $storage) {
+  public function preSave(EntityStorageInterface $storage)
+  {
     \Drupal::service('cohesion.entity_update_manager')->apply($this);
 
     // If the entity type can't be enabled or disable force setting status to
@@ -242,7 +258,8 @@ abstract class CohesionConfigEntityBase extends ConfigEntityBase implements Cohe
   /**
    * {@inheritdoc}
    */
-  public function postSave(EntityStorageInterface $storage, $update = TRUE) {
+  public function postSave(EntityStorageInterface $storage, $update = TRUE)
+  {
 
     // Update the requires table for this entity.
     \Drupal::service('cohesion_usage.update_manager')->buildRequires($this);
@@ -257,7 +274,8 @@ abstract class CohesionConfigEntityBase extends ConfigEntityBase implements Cohe
   /**
    * {@inheritdoc}
    */
-  public static function preDelete(EntityStorageInterface $storage, array $entities) {
+  public static function preDelete(EntityStorageInterface $storage, array $entities)
+  {
     foreach ($entities as $entity) {
       if ($entity->isUninstalling() || $entity->isSyncing()) {
         // During extension uninstall and configuration synchronization
@@ -281,7 +299,8 @@ abstract class CohesionConfigEntityBase extends ConfigEntityBase implements Cohe
   /**
    * {@inheritdoc}
    */
-  public static function postDelete(EntityStorageInterface $storage, array $entities) {
+  public static function postDelete(EntityStorageInterface $storage, array $entities)
+  {
     parent::postDelete($storage, $entities);
     foreach ($entities as $entity) {
       $config_entities = \Drupal::service('config.manager')
@@ -304,7 +323,8 @@ abstract class CohesionConfigEntityBase extends ConfigEntityBase implements Cohe
   /**
    * {@inheritdoc}
    */
-  public function setDefaultValues() {
+  public function setDefaultValues()
+  {
     // Set default entity values.
     $this->json_values = '{}';
     $this->json_mapper = '{}';
@@ -320,7 +340,8 @@ abstract class CohesionConfigEntityBase extends ConfigEntityBase implements Cohe
    *
    * @return array
    */
-  public static function getAll($enabled = TRUE) {
+  public static function getAll($enabled = TRUE)
+  {
     $entities = [];
     $entity_defs = \Drupal::service('entity_type.manager')->getDefinitions();
     $config_entities = array_keys($entity_defs);
@@ -329,11 +350,15 @@ abstract class CohesionConfigEntityBase extends ConfigEntityBase implements Cohe
       if (strpos($entity_id, 'cohesion_') !== FALSE) {
         if ($storage = \Drupal::service('entity_type.manager')->getStorage($entity_id)) {
           if ($enabled) {
-            $ids = $storage->getQuery()->condition('status', $enabled)->execute();
-          }
-          else {
-            $ids = $storage->getQuery()->execute();
+            $query = $storage->getQuery()->condition('status', $enabled);
+          } else {
+            $query = $storage->getQuery();
           }
+
+          // Explicitly call accessCheck() to handle access checks
+          $query->accessCheck(TRUE); // This will enable access checking.
+
+          $ids = $query->execute();
           $ids = array_keys($ids);
 
           if ($ids) {
@@ -348,14 +373,16 @@ abstract class CohesionConfigEntityBase extends ConfigEntityBase implements Cohe
   /**
    * {@inheritdoc}
    */
-  public function getLastAppliedUpdate() {
+  public function getLastAppliedUpdate()
+  {
     return $this->last_entity_update;
   }
 
   /**
    * {@inheritdoc}
    */
-  public function setLastAppliedUpdate($callback) {
+  public function setLastAppliedUpdate($callback)
+  {
     $this->set('last_entity_update', $callback);
     return $this;
   }
@@ -363,7 +390,8 @@ abstract class CohesionConfigEntityBase extends ConfigEntityBase implements Cohe
   /**
    * {@inheritdoc}
    */
-  public function hasInUse() {
+  public function hasInUse()
+  {
     // If this entity has an in-use route...
     if ($this->getEntityType()->hasLinkTemplate('in-use')) {
       // Check if it's in use on any entities.
@@ -375,7 +403,8 @@ abstract class CohesionConfigEntityBase extends ConfigEntityBase implements Cohe
   /**
    * {@inheritdoc}
    */
-  public function getInUseMarkup() {
+  public function getInUseMarkup()
+  {
     if ($this->hasInUse()) {
       $markup = [
         '#type' => 'link',
@@ -392,8 +421,7 @@ abstract class CohesionConfigEntityBase extends ConfigEntityBase implements Cohe
         ],
         '#attached' => ['library' => ['core/drupal.dialog.ajax']],
       ];
-    }
-    else {
+    } else {
       $markup = [
         '#markup' => t('Not in use'),
       ];
@@ -405,14 +433,16 @@ abstract class CohesionConfigEntityBase extends ConfigEntityBase implements Cohe
   /**
    * {@inheritdoc}
    */
-  public function getInUseMessage() {
+  public function getInUseMessage()
+  {
     return [];
   }
 
   /**
    * @inheritdoc
    */
-  protected function urlRouteParameters($rel) {
+  protected function urlRouteParameters($rel)
+  {
     $uri_route_parameters = parent::urlRouteParameters($rel);
 
     // Add entity id as a parameter for the in use route.
@@ -426,14 +456,16 @@ abstract class CohesionConfigEntityBase extends ConfigEntityBase implements Cohe
   /**
    * {@inheritdoc}
    */
-  public function reset() {
+  public function reset()
+  {
     $this->delete();
   }
 
   /**
    * {@inheritdoc}
    */
-  public function createDuplicate() {
+  public function createDuplicate()
+  {
     $duplicate = parent::createDuplicate();
 
     $duplicate->setModified(FALSE);
@@ -444,7 +476,8 @@ abstract class CohesionConfigEntityBase extends ConfigEntityBase implements Cohe
   /**
    * @param $entity
    */
-  protected static function clearCache($entity) {
+  protected static function clearCache($entity)
+  {
     // Clear the theme registry cache.
     \Drupal::service('theme.registry')->reset();
   }
@@ -452,31 +485,28 @@ abstract class CohesionConfigEntityBase extends ConfigEntityBase implements Cohe
   /**
    * @return \Drupal\cohesion\ApiPluginBase|void
    */
-  public function process() {
-  }
+  public function process() {}
 
   /**
    * {@inheritdoc}
    */
-  public function clearData() {
-  }
+  public function clearData() {}
 
   /**
    * {@inheritdoc}
    */
-  public function isLayoutCanvas() {
-  }
+  public function isLayoutCanvas() {}
 
   /**
    * {@inheritdoc}
    */
-  public function jsonValuesErrors() {
-  }
+  public function jsonValuesErrors() {}
 
   /**
    * {@inheritdoc}
    */
-  public function getEntityMachineNamePrefix() {
+  public function getEntityMachineNamePrefix()
+  {
     // If the entity already exists and doesn't contain the prefix, don't use
     // the prefix.
     if ($this->id !== NULL && substr($this->id, 0, strlen($this::ENTITY_MACHINE_NAME_PREFIX)) !== $this::ENTITY_MACHINE_NAME_PREFIX) {
@@ -491,14 +521,16 @@ abstract class CohesionConfigEntityBase extends ConfigEntityBase implements Cohe
   /**
    * {@inheritdoc}
    */
-  public function canEditMachineName() {
+  public function canEditMachineName()
+  {
     return $this->isNew();
   }
 
   /**
    * {@inheritdoc}
    */
-  public function calculateDependencies() {
+  public function calculateDependencies()
+  {
     // All dependencies should be recalculated on every save apart from enforced
     // dependencies. This ensures stale dependencies are never saved.
     $this->dependencies = array_intersect_key($this->dependencies, ['enforced' => '']);
@@ -517,5 +549,4 @@ abstract class CohesionConfigEntityBase extends ConfigEntityBase implements Cohe
 
     return $this;
   }
-
 }
diff --git a/cohesion/src/Plugin/views/style/CohesionViewsStylePlugin.php b/cohesion/src/Plugin/views/style/CohesionViewsStylePlugin.php
index 23e0c1e..acad53d 100644
--- a/cohesion/src/Plugin/views/style/CohesionViewsStylePlugin.php
+++ b/cohesion/src/Plugin/views/style/CohesionViewsStylePlugin.php
@@ -146,7 +146,7 @@ class CohesionViewsStylePlugin extends StylePluginBase {
    */
   public function render() {
     if ($this->usesRowPlugin() && empty($this->view->rowPlugin)) {
-      debug('Drupal\views\Plugin\views\style\StylePluginBase: Missing row plugin');
+      dump('Drupal\views\Plugin\views\style\StylePluginBase: Missing row plugin');
       return FALSE;
     }
 
diff --git a/cohesion/tests/src/Unit/LayoutCanvas/LayoutCanvasTest.php b/cohesion/tests/src/Unit/LayoutCanvas/LayoutCanvasTest.php
index d738fb2..5bc1c3a 100644
--- a/cohesion/tests/src/Unit/LayoutCanvas/LayoutCanvasTest.php
+++ b/cohesion/tests/src/Unit/LayoutCanvas/LayoutCanvasTest.php
@@ -26,7 +26,7 @@ class LayoutCanvasTest extends UnitTestCase {
     $layout_canvas = new LayoutCanvas($json_values);
     $links = $layout_canvas->getLinksReferences();
 
-    $this->assertArrayEquals($expected_links, $links);
+    $this->assertEqualsCanonicalizing($expected_links, $links);
   }
 
   /**
@@ -38,7 +38,7 @@ class LayoutCanvasTest extends UnitTestCase {
     $layout_canvas = new LayoutCanvas($json_values);
     $references = $layout_canvas->getEntityReferences(TRUE, TRUE);
 
-    $this->assertArrayEquals($expected_references, $references);
+    $this->assertEqualsCanonicalizing($expected_references, $references);
   }
 
   /**
diff --git a/cohesion/tests/src/Unit/Plugin/EntityUpdate/_0028EntityUpdateUnitTest.php b/cohesion/tests/src/Unit/Plugin/EntityUpdate/_0028EntityUpdateUnitTest.php
index 35b2565..559a7eb 100644
--- a/cohesion/tests/src/Unit/Plugin/EntityUpdate/_0028EntityUpdateUnitTest.php
+++ b/cohesion/tests/src/Unit/Plugin/EntityUpdate/_0028EntityUpdateUnitTest.php
@@ -43,7 +43,7 @@ class _0028EntityUpdateUnitTest extends EntityUpdateUnitTestCase {
     $this->assertionsLayoutCanvasBefore($base_style_entity->getDecodedJsonValues());
     $styles_before = $base_style_entity->getDecodedJsonValues()['styles'];
     $this->unit->runUpdate($base_style_entity);
-    $this->assertArrayEquals($styles_before, $base_style_entity->getDecodedJsonValues()['styles']);
+    $this->assertEqualsCanonicalizing($styles_before, $base_style_entity->getDecodedJsonValues()['styles']);
     $this->assertionsLayoutCanvasAfter($base_style_entity->getDecodedJsonValues());
     $this->unit->runUpdate($base_style_entity);
     $this->assertionsLayoutCanvasAfter($base_style_entity->getDecodedJsonValues());
diff --git a/cohesion/tests/src/Unit/SettingsEndpointUtilsTest.php b/cohesion/tests/src/Unit/SettingsEndpointUtilsTest.php
index 9b8f88f..a024943 100644
--- a/cohesion/tests/src/Unit/SettingsEndpointUtilsTest.php
+++ b/cohesion/tests/src/Unit/SettingsEndpointUtilsTest.php
@@ -72,7 +72,7 @@ class SettingsEndpointUtilsTest extends UnitTestCase {
 
 
     $all_colors = $this->unit->getColorsList($item);
-    $this->assertArrayEquals($expected, $all_colors);
+    $this->assertEqualsCanonicalizing($expected, $all_colors);
   }
 
   /**
diff --git a/cohesion/tests/src/Unit/TwigExtension/TwigExtensionTest.php b/cohesion/tests/src/Unit/TwigExtension/TwigExtensionTest.php
index ca3030f..22f0fa1 100644
--- a/cohesion/tests/src/Unit/TwigExtension/TwigExtensionTest.php
+++ b/cohesion/tests/src/Unit/TwigExtension/TwigExtensionTest.php
@@ -78,7 +78,7 @@ class TwigExtensionTest extends UnitTestCase {
     $this->route->method('getOption')->with('sitestudio_build')->willReturn($is_page_builder);
     $this->cohesion_current_route_match->method('getRouteEntities')->willReturn([$page_entity]);
     $test_build = $this->twigExtension->addComponentFrontEndBuilderMarkup($input_build, $context, $componentInstanceUuid, $component_content_UUID, $component_content_id);
-    $this->assertArrayEquals($expectation, $test_build);
+    $this->assertEqualsCanonicalizing($expectation, $test_build);
   }
 
   /**
